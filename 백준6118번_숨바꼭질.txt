#include <iostream>
#include <vector>
#include <queue>
using namespace std;
vector<vector<int>> g;
int *dist;
void showtest(int n) {
	for (int i = 1; i < n + 1; i++) {
		cout << dist[i] << endl;
	}
}
void dijkstra(int start) {
	priority_queue<int, vector<int>, greater<int>> pq;
	dist[1] = 0;
	pq.push(start);
	while (!pq.empty()) {
		int vertex = pq.top();
		pq.pop();
		for (auto adj : g[vertex]) {
			int distance = dist[vertex] + 1;
			if (dist[adj] > distance) {
				dist[adj] = distance;
				pq.push(adj);
			}
		}
	}
}
int main() {
	int n, m, max_dist = 0, index, count = 1;
	cin >> n >> m;
	dist = (int*)malloc(sizeof(int)*(n + 1));
	for (int i = 0; i < n + 1; i++)
		dist[i] = 2e9;
	g.resize(n + 1);
	for (int i = 0; i < m; i++) {
		int A_i, B_i;
		cin >> A_i >> B_i;
		g[A_i].push_back(B_i);
		g[B_i].push_back(A_i);
	}
	dijkstra(1);
	//showtest(n);
	for (int i = 1; i < n + 1; i++) {
		if (max_dist < dist[i]) {
			max_dist = dist[i];
			index = i;
			count = 1;
		}
		else if (max_dist == dist[i]) 
			count++;		
	}
	cout << index << " " << max_dist << " " << count;
	for (int i = 0; i < g.size(); i++)
		g[i].clear();
	g.clear();
	free(dist);
	return 0;
}